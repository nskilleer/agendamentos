const mongoose = require('mongoose');
const logger = require('../configuracoes/logger');

const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGODB_URI;

        if (!mongoURI) {
            console.log('‚ùå ERRO: Vari√°vel MONGODB_URI n√£o encontrada!');
            console.log('üìÅ Verifique o arquivo variaveisambiente.env');
            logger.error('Erro: A vari√°vel de ambiente MONGODB_URI n√£o est√° definida.');
            logger.error('Por favor, verifique o arquivo variaveisambiente.env e garanta que MONGODB_URI esteja presente e correta.');
            throw new Error('MONGODB_URI n√£o configurada');
        }

        console.log('üîç Validando URI do MongoDB...');
        
        // Extrair informa√ß√µes da URI (sem mostrar senha)
        const uriInfo = mongoURI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@');
        console.log(`üìä URI: ${uriInfo}`);
        
        console.log('‚è≥ Estabelecendo conex√£o...');
        
        // Configura√ß√µes de conex√£o otimizadas
        const connectionOptions = {
            serverSelectionTimeoutMS: 10000, // 10 segundos
            connectTimeoutMS: 15000,         // 15 segundos
            socketTimeoutMS: 45000,          // 45 segundos
            maxPoolSize: 10,                 // Manter at√© 10 conex√µes
            minPoolSize: 1,                  // Manter pelo menos 1 conex√£o
            // bufferMaxEntries e bufferCommands s√£o op√ß√µes do Mongoose, n√£o do MongoDB driver
        };

        // Conecta ao MongoDB
        await mongoose.connect(mongoURI, connectionOptions);

        // Informa√ß√µes da conex√£o
        const connection = mongoose.connection;
        console.log('‚úÖ Conectado ao MongoDB com sucesso!');
        console.log(`üìç Host: ${connection.host}`);
        console.log(`üéØ Database: ${connection.name}`);
        console.log(`üîå Estado: ${getConnectionState(connection.readyState)}`);
        console.log(`‚ö° Pool de conex√µes configurado (min: 1, max: 10)`);
        
        logger.info('Conex√£o com MongoDB estabelecida com sucesso!');
        logger.info(`Host: ${connection.host}, Database: ${connection.name}`);

        // Event listeners para monitorar a conex√£o
        setupConnectionListeners();

    } catch (err) {
        console.log('‚ùå FALHA AO CONECTAR COM MONGODB:');
        console.log(`üí• Erro: ${err.message}`);
        
        if (err.message.includes('ENOTFOUND')) {
            console.log('üåê Problema de rede - verifique sua conex√£o com a internet');
        } else if (err.message.includes('authentication failed')) {
            console.log('üîê Erro de autentica√ß√£o - verifique usu√°rio e senha');
        } else if (err.message.includes('IP')) {
            console.log('üö´ IP n√£o autorizado - configure o IP no MongoDB Atlas');
        }
        
        console.log('üìã Poss√≠veis solu√ß√µes:');
        console.log('   1. Verificar credenciais no arquivo variaveisambiente.env');
        console.log('   2. Verificar se o cluster do MongoDB Atlas est√° ativo');
        console.log('   3. Verificar se o IP atual est√° autorizado no MongoDB Atlas');
        console.log('   4. Verificar conex√£o com a internet');
        
        logger.error('Erro ao conectar ao MongoDB:', err);
        logger.error('Causa do erro:', err.message);
        
        // Propaga o erro para que o index.js possa lidar com ele
        throw err;
    }
};

// Fun√ß√£o para traduzir o estado da conex√£o
function getConnectionState(state) {
    const states = {
        0: 'Desconectado',
        1: 'Conectado',
        2: 'Conectando',
        3: 'Desconectando'
    };
    return states[state] || 'Estado desconhecido';
}

// Configurar listeners para monitorar a conex√£o
function setupConnectionListeners() {
    const connection = mongoose.connection;

    connection.on('connected', () => {
        console.log('üîó MongoDB - Conex√£o estabelecida');
        logger.info('MongoDB - Conex√£o estabelecida');
    });

    connection.on('disconnected', () => {
        console.log('üîå MongoDB - Conex√£o perdida');
        logger.warn('MongoDB - Conex√£o perdida');
    });

    connection.on('reconnected', () => {
        console.log('üîÑ MongoDB - Reconectado com sucesso');
        logger.info('MongoDB - Reconectado com sucesso');
    });

    connection.on('error', (error) => {
        console.log('‚ö†Ô∏è MongoDB - Erro na conex√£o:', error.message);
        logger.error('MongoDB - Erro na conex√£o:', error);
    });

    connection.on('close', () => {
        console.log('üì¥ MongoDB - Conex√£o fechada');
        logger.info('MongoDB - Conex√£o fechada');
    });
}

const dbMiddleware = (req, res, next) => {
    const connectionState = mongoose.connection.readyState;
    
    if (connectionState === 1) {
        // Conex√£o ativa - prosseguir
        next();
    } else {
        const stateText = getConnectionState(connectionState);
        console.log(`‚ö†Ô∏è Requisi√ß√£o bloqueada - MongoDB ${stateText}`);
        console.log(`üì° ${req.method} ${req.originalUrl} - C√≥digo: 503`);
        
        logger.warn(`Requisi√ß√£o recebida, mas MongoDB n√£o est√° conectado. Estado: ${stateText} (${connectionState})`);
        logger.warn(`Requisi√ß√£o: ${req.method} ${req.originalUrl}`);
        
        res.status(503).json({ 
            success: false, 
            message: 'Servi√ßo indispon√≠vel. O banco de dados n√£o est√° conectado.',
            details: `Estado da conex√£o: ${stateText}`
        });
    }
};

module.exports = { connectDB, dbMiddleware };
